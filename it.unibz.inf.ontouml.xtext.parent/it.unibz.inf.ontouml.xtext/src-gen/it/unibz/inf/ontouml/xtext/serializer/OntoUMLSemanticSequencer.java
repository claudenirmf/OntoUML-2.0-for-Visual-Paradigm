/*
 * generated by Xtext 2.12.0
 */
package it.unibz.inf.ontouml.xtext.serializer;

import com.google.inject.Inject;
import it.unibz.inf.ontouml.xtext.services.OntoUMLGrammarAccess;
import it.unibz.inf.ontouml.xtext.xcore.Generalization;
import it.unibz.inf.ontouml.xtext.xcore.GeneralizationSet;
import it.unibz.inf.ontouml.xtext.xcore.Model;
import it.unibz.inf.ontouml.xtext.xcore.OntoUMLClass;
import it.unibz.inf.ontouml.xtext.xcore.XcorePackage;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class OntoUMLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private OntoUMLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == XcorePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XcorePackage.GENERALIZATION:
				sequence_Generalization(context, (Generalization) semanticObject); 
				return; 
			case XcorePackage.GENERALIZATION_SET:
				sequence_GeneralizationSet(context, (GeneralizationSet) semanticObject); 
				return; 
			case XcorePackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case XcorePackage.ONTO_UML_CLASS:
				sequence_OntoUMLClass(context, (OntoUMLClass) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ModelElement returns GeneralizationSet
	 *     GeneralizationSet returns GeneralizationSet
	 *
	 * Constraint:
	 *     (
	 *         isDisjoint?='disjoint' 
	 *         isComplete?='complete' 
	 *         name=ID 
	 *         alias=STRING? 
	 *         generalizations+=[Generalization|ID] 
	 *         generalizations+=[Generalization|ID]*
	 *     )
	 */
	protected void sequence_GeneralizationSet(ISerializationContext context, GeneralizationSet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelElement returns Generalization
	 *     Generalization returns Generalization
	 *
	 * Constraint:
	 *     (name=ID alias=STRING? superclass=[OntoUMLClass|ID] subclass=[OntoUMLClass|ID])
	 */
	protected void sequence_Generalization(ISerializationContext context, Generalization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (elements+=ModelElement elements+=ModelElement*)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelElement returns OntoUMLClass
	 *     OntoUMLClass returns OntoUMLClass
	 *
	 * Constraint:
	 *     (
	 *         _type=EndurantType 
	 *         name=ID 
	 *         alias=STRING? 
	 *         (generalizationsToSuperclasses+=[Generalization|ID] generalizationsToSuperclasses+=[Generalization|ID]*)? 
	 *         (generalizationsToSubclasses+=[Generalization|ID] generalizationsToSubclasses+=[Generalization|ID]*)?
	 *     )
	 */
	protected void sequence_OntoUMLClass(ISerializationContext context, OntoUMLClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

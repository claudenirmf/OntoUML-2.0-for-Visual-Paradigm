/*
 * generated by Xtext 2.13.0
 */
grammar InternalOntoUML;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package it.unibz.inf.ontouml.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package it.unibz.inf.ontouml.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import it.unibz.inf.ontouml.xtext.services.OntoUMLGrammarAccess;

}

@parser::members {

 	private OntoUMLGrammarAccess grammarAccess;

    public InternalOntoUMLParser(TokenStream input, OntoUMLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected OntoUMLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Model'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelAccess().getModelKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getElementsModelElementParserRuleCall_2_0());
				}
				lv_elements_2_0=ruleModelElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"elements",
						lv_elements_2_0,
						"it.unibz.inf.ontouml.xtext.OntoUML.ModelElement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getModelAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getElementsModelElementParserRuleCall_3_1_0());
					}
					lv_elements_4_0=ruleModelElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"elements",
							lv_elements_4_0,
							"it.unibz.inf.ontouml.xtext.OntoUML.ModelElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleModelElement
entryRuleModelElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelElementRule()); }
	iv_ruleModelElement=ruleModelElement
	{ $current=$iv_ruleModelElement.current; }
	EOF;

// Rule ModelElement
ruleModelElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getModelElementAccess().getPackageParserRuleCall_0());
		}
		this_Package_0=rulePackage
		{
			$current = $this_Package_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getModelElementAccess().getOntoUMLClassParserRuleCall_1());
		}
		this_OntoUMLClass_1=ruleOntoUMLClass
		{
			$current = $this_OntoUMLClass_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getModelElementAccess().getGeneralizationParserRuleCall_2());
		}
		this_Generalization_2=ruleGeneralization
		{
			$current = $this_Generalization_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getModelElementAccess().getGeneralizationSetParserRuleCall_3());
		}
		this_GeneralizationSet_3=ruleGeneralizationSet
		{
			$current = $this_GeneralizationSet_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePackage
entryRulePackage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackageRule()); }
	iv_rulePackage=rulePackage
	{ $current=$iv_rulePackage.current; }
	EOF;

// Rule Package
rulePackage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Package'
		{
			newLeafNode(otherlv_0, grammarAccess.getPackageAccess().getPackageKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPackageAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPackageRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_alias_2_0=RULE_STRING
				{
					newLeafNode(lv_alias_2_0, grammarAccess.getPackageAccess().getAliasSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPackageRule());
					}
					setWithLastConsumed(
						$current,
						"alias",
						lv_alias_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getPackageAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageAccess().getContentsModelElementParserRuleCall_4_0());
				}
				lv_contents_4_0=ruleModelElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageRule());
					}
					add(
						$current,
						"contents",
						lv_contents_4_0,
						"it.unibz.inf.ontouml.xtext.OntoUML.ModelElement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getPackageAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleOntoUMLClass
entryRuleOntoUMLClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOntoUMLClassRule()); }
	iv_ruleOntoUMLClass=ruleOntoUMLClass
	{ $current=$iv_ruleOntoUMLClass.current; }
	EOF;

// Rule OntoUMLClass
ruleOntoUMLClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOntoUMLClassAccess().get_typeEndurantTypeEnumRuleCall_0_0());
				}
				lv__type_0_0=ruleEndurantType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOntoUMLClassRule());
					}
					set(
						$current,
						"_type",
						lv__type_0_0,
						"it.unibz.inf.ontouml.xtext.OntoUML.EndurantType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='Class'
		{
			newLeafNode(otherlv_1, grammarAccess.getOntoUMLClassAccess().getClassKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getOntoUMLClassAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOntoUMLClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_alias_3_0=RULE_STRING
				{
					newLeafNode(lv_alias_3_0, grammarAccess.getOntoUMLClassAccess().getAliasSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOntoUMLClassRule());
					}
					setWithLastConsumed(
						$current,
						"alias",
						lv_alias_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
	)
;

// Entry rule entryRuleGeneralization
entryRuleGeneralization returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGeneralizationRule()); }
	iv_ruleGeneralization=ruleGeneralization
	{ $current=$iv_ruleGeneralization.current; }
	EOF;

// Rule Generalization
ruleGeneralization returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Generalization'
		{
			newLeafNode(otherlv_0, grammarAccess.getGeneralizationAccess().getGeneralizationKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getGeneralizationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGeneralizationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_alias_2_0=RULE_STRING
				{
					newLeafNode(lv_alias_2_0, grammarAccess.getGeneralizationAccess().getAliasSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGeneralizationRule());
					}
					setWithLastConsumed(
						$current,
						"alias",
						lv_alias_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		otherlv_3='superclass'
		{
			newLeafNode(otherlv_3, grammarAccess.getGeneralizationAccess().getSuperclassKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGeneralizationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getGeneralizationAccess().getSuperclassOntoUMLClassCrossReference_4_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='subclass'
		{
			newLeafNode(otherlv_5, grammarAccess.getGeneralizationAccess().getSubclassKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGeneralizationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getGeneralizationAccess().getSubclassOntoUMLClassCrossReference_6_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGeneralizationSet
entryRuleGeneralizationSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGeneralizationSetRule()); }
	iv_ruleGeneralizationSet=ruleGeneralizationSet
	{ $current=$iv_ruleGeneralizationSet.current; }
	EOF;

// Rule GeneralizationSet
ruleGeneralizationSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_isDisjoint_0_0='disjoint'
				{
					newLeafNode(lv_isDisjoint_0_0, grammarAccess.getGeneralizationSetAccess().getIsDisjointDisjointKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGeneralizationSetRule());
					}
					setWithLastConsumed($current, "isDisjoint", true, "disjoint");
				}
			)
		)
		(
			(
				lv_isComplete_1_0='complete'
				{
					newLeafNode(lv_isComplete_1_0, grammarAccess.getGeneralizationSetAccess().getIsCompleteCompleteKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGeneralizationSetRule());
					}
					setWithLastConsumed($current, "isComplete", true, "complete");
				}
			)
		)
		otherlv_2='GeneralizationSet'
		{
			newLeafNode(otherlv_2, grammarAccess.getGeneralizationSetAccess().getGeneralizationSetKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getGeneralizationSetAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGeneralizationSetRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_alias_4_0=RULE_STRING
				{
					newLeafNode(lv_alias_4_0, grammarAccess.getGeneralizationSetAccess().getAliasSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGeneralizationSetRule());
					}
					setWithLastConsumed(
						$current,
						"alias",
						lv_alias_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		otherlv_5='generalizations'
		{
			newLeafNode(otherlv_5, grammarAccess.getGeneralizationSetAccess().getGeneralizationsKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGeneralizationSetRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getGeneralizationSetAccess().getGeneralizationsGeneralizationCrossReference_6_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_7=','
			{
				newLeafNode(otherlv_7, grammarAccess.getGeneralizationSetAccess().getCommaKeyword_7_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGeneralizationSetRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getGeneralizationSetAccess().getGeneralizationsGeneralizationCrossReference_7_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Rule EndurantType
ruleEndurantType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='none'
			{
				$current = grammarAccess.getEndurantTypeAccess().getNoneEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEndurantTypeAccess().getNoneEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='kind'
			{
				$current = grammarAccess.getEndurantTypeAccess().getKindEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEndurantTypeAccess().getKindEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='relatorKind'
			{
				$current = grammarAccess.getEndurantTypeAccess().getRelatorKindEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getEndurantTypeAccess().getRelatorKindEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='modeKind'
			{
				$current = grammarAccess.getEndurantTypeAccess().getModeKindEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getEndurantTypeAccess().getModeKindEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='qualityKind'
			{
				$current = grammarAccess.getEndurantTypeAccess().getQualityKindEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getEndurantTypeAccess().getQualityKindEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='subkind'
			{
				$current = grammarAccess.getEndurantTypeAccess().getSubkindEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getEndurantTypeAccess().getSubkindEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='role'
			{
				$current = grammarAccess.getEndurantTypeAccess().getRoleEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getEndurantTypeAccess().getRoleEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='phase'
			{
				$current = grammarAccess.getEndurantTypeAccess().getPhaseEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getEndurantTypeAccess().getPhaseEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='category'
			{
				$current = grammarAccess.getEndurantTypeAccess().getCategoryEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getEndurantTypeAccess().getCategoryEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='mixin'
			{
				$current = grammarAccess.getEndurantTypeAccess().getMixinEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getEndurantTypeAccess().getMixinEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='roleMixin'
			{
				$current = grammarAccess.getEndurantTypeAccess().getRoleMixinEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getEndurantTypeAccess().getRoleMixinEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='phaseMixin'
			{
				$current = grammarAccess.getEndurantTypeAccess().getPhaseMixinEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getEndurantTypeAccess().getPhaseMixinEnumLiteralDeclaration_11());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

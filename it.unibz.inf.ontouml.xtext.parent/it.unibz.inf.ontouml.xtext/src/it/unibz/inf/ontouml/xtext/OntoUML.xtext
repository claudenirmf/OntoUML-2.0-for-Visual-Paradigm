// automatically generated by Xtext
grammar it.unibz.inf.ontouml.xtext.OntoUML with org.eclipse.xtext.common.Terminals

import "http://www.inf.unibz.it/ontouml/xtext/xcore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	'Model'
	'{'
		elements+=ModelElement ( "," elements+=ModelElement)*
	'}';

//QualifiedName returns ecore::EString:
//	ID ('.' ID)*;

//QualifiedNameWithWildcard:
//	QualifiedName '.*'?;

ModelElement:
	OntoUMLClass | Generalization | GeneralizationSet ;

OntoUMLClass returns OntoUMLClass:
	_type=EndurantType 'Class' name=ID alias=STRING?
	('supers...' '{' generalizationsToSuperclasses+=[Generalization] (',' generalizationsToSuperclasses+=[Generalization])* '}')?
	('subs...' '{' generalizationsToSubclasses+=[Generalization] (',' generalizationsToSubclasses+=[Generalization])* '}')?
	;

enum EndurantType:
	None | Kind | RelatorKind | ModeKind
	| QualityKind | Subkind | Role | Phase
	| Category | Mixin | RoleMixin | PhaseMixin ;

Generalization:
	'Generalization' name=ID  alias=STRING?
	'superclass' superclass=[OntoUMLClass] 'subclass' subclass=[OntoUMLClass];

GeneralizationSet:
	isDisjoint?='disjoint' isComplete?='complete' 'GeneralizationSet' name=ID  alias=STRING?
	'generalizations' generalizations+=[Generalization] (',' generalizations+=[Generalization])* ;

//EString returns ecore::EString:
//	STRING | ID;

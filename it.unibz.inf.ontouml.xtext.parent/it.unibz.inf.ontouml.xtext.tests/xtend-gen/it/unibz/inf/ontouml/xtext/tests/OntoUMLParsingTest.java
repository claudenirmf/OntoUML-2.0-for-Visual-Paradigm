/**
 * generated by Xtext 2.13.0
 */
package it.unibz.inf.ontouml.xtext.tests;

import com.google.inject.Inject;
import it.unibz.inf.ontouml.xtext.tests.OntoUMLInjectorProvider;
import it.unibz.inf.ontouml.xtext.utils.ModelUtils;
import it.unibz.inf.ontouml.xtext.xcore.Generalization;
import it.unibz.inf.ontouml.xtext.xcore.Model;
import it.unibz.inf.ontouml.xtext.xcore.OntoUMLClass;
import it.unibz.inf.ontouml.xtext.xcore.XcoreFactory;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(OntoUMLInjectorProvider.class)
@SuppressWarnings("all")
public class OntoUMLParsingTest {
  @Inject
  @Extension
  private ParseHelper<Model> parseHelper;
  
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  @Inject
  @Extension
  private ModelUtils _modelUtils;
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model  { Class Batata }");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assert.assertTrue(_builder_1.toString(), errors.isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void getClassHierarchyTest() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append(" ");
      _builder.append("Model { Class Batata }");
      final Model result = this.parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(result);
      final OntoUMLClass c1 = XcoreFactory.eINSTANCE.createOntoUMLClass();
      c1.setName("C1");
      final OntoUMLClass c2 = XcoreFactory.eINSTANCE.createOntoUMLClass();
      c2.setName("C2");
      final OntoUMLClass c3 = XcoreFactory.eINSTANCE.createOntoUMLClass();
      c3.setName("C3");
      final OntoUMLClass c4 = XcoreFactory.eINSTANCE.createOntoUMLClass();
      c4.setName("C4");
      final Generalization g1_2 = XcoreFactory.eINSTANCE.createGeneralization();
      final Generalization g1_3 = XcoreFactory.eINSTANCE.createGeneralization();
      final Generalization g2_4 = XcoreFactory.eINSTANCE.createGeneralization();
      final Generalization g3_4 = XcoreFactory.eINSTANCE.createGeneralization();
      c1.getGeneralizationsToSuperclasses().add(g1_2);
      c2.getGeneralizationsToSubclasses().add(g1_2);
      g1_2.setSubclass(c1);
      g1_2.setSuperclass(c2);
      c1.getGeneralizationsToSuperclasses().add(g1_3);
      c3.getGeneralizationsToSubclasses().add(g1_3);
      g1_3.setSubclass(c1);
      g1_3.setSuperclass(c3);
      c2.getGeneralizationsToSuperclasses().add(g2_4);
      c4.getGeneralizationsToSubclasses().add(g2_4);
      g2_4.setSubclass(c2);
      g2_4.setSuperclass(c4);
      c3.getGeneralizationsToSuperclasses().add(g3_4);
      c4.getGeneralizationsToSubclasses().add(g3_4);
      g3_4.setSubclass(c3);
      g3_4.setSuperclass(c4);
      Assert.assertTrue(this._modelUtils.getClassHierarchy(c1).containsAll(CollectionLiterals.<OntoUMLClass>newHashSet(c2, c3, c4)));
      Assert.assertTrue(this._modelUtils.getClassHierarchy(c2).containsAll(CollectionLiterals.<OntoUMLClass>newHashSet(c4)));
      Assert.assertTrue(this._modelUtils.getClassHierarchy(c3).containsAll(CollectionLiterals.<OntoUMLClass>newHashSet(c4)));
      Assert.assertTrue(this._modelUtils.getClassHierarchy(c4).isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}

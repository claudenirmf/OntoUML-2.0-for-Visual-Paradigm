/*
 * generated by Xtext 2.13.0
 */
package it.unibz.inf.ontouml.xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import it.unibz.inf.ontouml.xtext.ide.contentassist.antlr.internal.InternalOntoUMLParser;
import it.unibz.inf.ontouml.xtext.services.OntoUMLGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class OntoUMLParser extends AbstractContentAssistParser {

	@Inject
	private OntoUMLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalOntoUMLParser createParser() {
		InternalOntoUMLParser result = new InternalOntoUMLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelElementAccess().getAlternatives(), "rule__ModelElement__Alternatives");
					put(grammarAccess.getEndurantTypeAccess().getAlternatives(), "rule__EndurantType__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getModelAccess().getGroup_3(), "rule__Model__Group_3__0");
					put(grammarAccess.getOntoUMLClassAccess().getGroup(), "rule__OntoUMLClass__Group__0");
					put(grammarAccess.getOntoUMLClassAccess().getGroup_4(), "rule__OntoUMLClass__Group_4__0");
					put(grammarAccess.getOntoUMLClassAccess().getGroup_4_3(), "rule__OntoUMLClass__Group_4_3__0");
					put(grammarAccess.getOntoUMLClassAccess().getGroup_5(), "rule__OntoUMLClass__Group_5__0");
					put(grammarAccess.getOntoUMLClassAccess().getGroup_5_3(), "rule__OntoUMLClass__Group_5_3__0");
					put(grammarAccess.getGeneralizationAccess().getGroup(), "rule__Generalization__Group__0");
					put(grammarAccess.getGeneralizationSetAccess().getGroup(), "rule__GeneralizationSet__Group__0");
					put(grammarAccess.getGeneralizationSetAccess().getGroup_8(), "rule__GeneralizationSet__Group_8__0");
					put(grammarAccess.getModelAccess().getElementsAssignment_2(), "rule__Model__ElementsAssignment_2");
					put(grammarAccess.getModelAccess().getElementsAssignment_3_1(), "rule__Model__ElementsAssignment_3_1");
					put(grammarAccess.getOntoUMLClassAccess().get_typeAssignment_0(), "rule__OntoUMLClass___typeAssignment_0");
					put(grammarAccess.getOntoUMLClassAccess().getNameAssignment_2(), "rule__OntoUMLClass__NameAssignment_2");
					put(grammarAccess.getOntoUMLClassAccess().getAliasAssignment_3(), "rule__OntoUMLClass__AliasAssignment_3");
					put(grammarAccess.getOntoUMLClassAccess().getGeneralizationsToSuperclassesAssignment_4_2(), "rule__OntoUMLClass__GeneralizationsToSuperclassesAssignment_4_2");
					put(grammarAccess.getOntoUMLClassAccess().getGeneralizationsToSuperclassesAssignment_4_3_1(), "rule__OntoUMLClass__GeneralizationsToSuperclassesAssignment_4_3_1");
					put(grammarAccess.getOntoUMLClassAccess().getGeneralizationsToSubclassesAssignment_5_2(), "rule__OntoUMLClass__GeneralizationsToSubclassesAssignment_5_2");
					put(grammarAccess.getOntoUMLClassAccess().getGeneralizationsToSubclassesAssignment_5_3_1(), "rule__OntoUMLClass__GeneralizationsToSubclassesAssignment_5_3_1");
					put(grammarAccess.getGeneralizationAccess().getNameAssignment_1(), "rule__Generalization__NameAssignment_1");
					put(grammarAccess.getGeneralizationAccess().getAliasAssignment_2(), "rule__Generalization__AliasAssignment_2");
					put(grammarAccess.getGeneralizationAccess().getSuperclassAssignment_4(), "rule__Generalization__SuperclassAssignment_4");
					put(grammarAccess.getGeneralizationAccess().getSubclassAssignment_6(), "rule__Generalization__SubclassAssignment_6");
					put(grammarAccess.getGeneralizationSetAccess().getIsDisjointAssignment_0(), "rule__GeneralizationSet__IsDisjointAssignment_0");
					put(grammarAccess.getGeneralizationSetAccess().getIsCompleteAssignment_1(), "rule__GeneralizationSet__IsCompleteAssignment_1");
					put(grammarAccess.getGeneralizationSetAccess().getNameAssignment_3(), "rule__GeneralizationSet__NameAssignment_3");
					put(grammarAccess.getGeneralizationSetAccess().getAliasAssignment_4(), "rule__GeneralizationSet__AliasAssignment_4");
					put(grammarAccess.getGeneralizationSetAccess().getGeneralizationsAssignment_7(), "rule__GeneralizationSet__GeneralizationsAssignment_7");
					put(grammarAccess.getGeneralizationSetAccess().getGeneralizationsAssignment_8_1(), "rule__GeneralizationSet__GeneralizationsAssignment_8_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public OntoUMLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(OntoUMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
